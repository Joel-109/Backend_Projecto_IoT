// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const deleteDish = `-- name: DeleteDish :exec
DELETE FROM Dish
WHERE id_dish = ?
`

func (q *Queries) DeleteDish(ctx context.Context, idDish int64) error {
	_, err := q.db.ExecContext(ctx, deleteDish, idDish)
	return err
}

const deleteInvoiceDish = `-- name: DeleteInvoiceDish :exec
DELETE FROM Invoices 
WHERE rowid IN (
  SELECT rowid FROM Invoices I
  WHERE I.id_dish = ? AND I.id_order = ?
  LIMIT 1
)
`

type DeleteInvoiceDishParams struct {
	IDDish  sql.NullInt64
	IDOrder sql.NullInt64
}

func (q *Queries) DeleteInvoiceDish(ctx context.Context, arg DeleteInvoiceDishParams) error {
	_, err := q.db.ExecContext(ctx, deleteInvoiceDish, arg.IDDish, arg.IDOrder)
	return err
}

const gestOrderNumber = `-- name: GestOrderNumber :one
SELECT id_order
FROM Orders
WHERE id_desk = ?
ORDER BY id_order DESC
`

func (q *Queries) GestOrderNumber(ctx context.Context, idDesk sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, gestOrderNumber, idDesk)
	var id_order int64
	err := row.Scan(&id_order)
	return id_order, err
}

const getDishes = `-- name: GetDishes :many
SELECT id_dish, description, name, image, price, id_category
FROM Dish
`

func (q *Queries) GetDishes(ctx context.Context) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, getDishes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.IDDish,
			&i.Description,
			&i.Name,
			&i.Image,
			&i.Price,
			&i.IDCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDishesInvoice = `-- name: GetDishesInvoice :many
SELECT D.name,D.image,D.description,D.price,D.id_category, O.id_order, O.id_desk, O.id_status
FROM Invoices I, Dish D, Orders O
WHERE I.id_dish = D.id_dish AND
I.id_order = ?
`

type GetDishesInvoiceRow struct {
	Name        string
	Image       string
	Description string
	Price       float64
	IDCategory  string
	IDOrder     int64
	IDDesk      sql.NullInt64
	IDStatus    sql.NullString
}

func (q *Queries) GetDishesInvoice(ctx context.Context, idOrder sql.NullInt64) ([]GetDishesInvoiceRow, error) {
	rows, err := q.db.QueryContext(ctx, getDishesInvoice, idOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDishesInvoiceRow
	for rows.Next() {
		var i GetDishesInvoiceRow
		if err := rows.Scan(
			&i.Name,
			&i.Image,
			&i.Description,
			&i.Price,
			&i.IDCategory,
			&i.IDOrder,
			&i.IDDesk,
			&i.IDStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoices = `-- name: GetInvoices :many
SELECT i.id_order, id_dish, created_at, o.id_order, id_desk, id_status
FROM Invoices I, Orders O
WHERE I.id_order = O.id_order
`

type GetInvoicesRow struct {
	IDOrder   sql.NullInt64
	IDDish    sql.NullInt64
	CreatedAt time.Time
	IDOrder_2 int64
	IDDesk    sql.NullInt64
	IDStatus  sql.NullString
}

func (q *Queries) GetInvoices(ctx context.Context) ([]GetInvoicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoicesRow
	for rows.Next() {
		var i GetInvoicesRow
		if err := rows.Scan(
			&i.IDOrder,
			&i.IDDish,
			&i.CreatedAt,
			&i.IDOrder_2,
			&i.IDDesk,
			&i.IDStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatus = `-- name: GetStatus :many
SELECT id_status
FROM Status
`

func (q *Queries) GetStatus(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id_status string
		if err := rows.Scan(&id_status); err != nil {
			return nil, err
		}
		items = append(items, id_status)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotal = `-- name: GetTotal :one
SELECT SUM(D.price)
FROM Invoices I, Dish D
WHERE D.id_dish = I.id_dish
AND I.id_order = ?
`

func (q *Queries) GetTotal(ctx context.Context, idOrder sql.NullInt64) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, getTotal, idOrder)
	var sum sql.NullFloat64
	err := row.Scan(&sum)
	return sum, err
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO Category (id_category)
VALUES (?)
`

func (q *Queries) InsertCategory(ctx context.Context, idCategory string) error {
	_, err := q.db.ExecContext(ctx, insertCategory, idCategory)
	return err
}

const insertDish = `-- name: InsertDish :exec
INSERT INTO Dish (description,name,image,price,id_category)
VALUES (?,?,?,?,?)
`

type InsertDishParams struct {
	Description string
	Name        string
	Image       string
	Price       float64
	IDCategory  string
}

func (q *Queries) InsertDish(ctx context.Context, arg InsertDishParams) error {
	_, err := q.db.ExecContext(ctx, insertDish,
		arg.Description,
		arg.Name,
		arg.Image,
		arg.Price,
		arg.IDCategory,
	)
	return err
}

const insertInvoice = `-- name: InsertInvoice :exec
INSERT INTO Invoices(id_order,id_dish)
VALUES (?,?)
`

type InsertInvoiceParams struct {
	IDOrder sql.NullInt64
	IDDish  sql.NullInt64
}

func (q *Queries) InsertInvoice(ctx context.Context, arg InsertInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, insertInvoice, arg.IDOrder, arg.IDDish)
	return err
}

const insertOrder = `-- name: InsertOrder :exec
INSERT INTO Orders(id_desk,id_status)
VALUES(?,?)
`

type InsertOrderParams struct {
	IDDesk   sql.NullInt64
	IDStatus sql.NullString
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) error {
	_, err := q.db.ExecContext(ctx, insertOrder, arg.IDDesk, arg.IDStatus)
	return err
}

const insertStatus = `-- name: InsertStatus :exec
INSERT INTO Status (id_status)
VALUES (?)
`

func (q *Queries) InsertStatus(ctx context.Context, idStatus string) error {
	_, err := q.db.ExecContext(ctx, insertStatus, idStatus)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET id_status = ?
WHERE id_order = ?
`

type UpdateOrderStatusParams struct {
	IDStatus sql.NullString
	IDOrder  int64
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.IDStatus, arg.IDOrder)
	return err
}
